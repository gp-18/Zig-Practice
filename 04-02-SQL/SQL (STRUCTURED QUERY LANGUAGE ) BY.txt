SQL (STRUCTURED QUERY LANGUAGE ) BY APPNA COLLEGE 

DATABASE => collection of data 

DBMS => database management system => software application 

TYPES of DATABASE => Relational Database => stores data in table format uses sql ex: mysql , oracle => Rdbms 
=> Non Relational Database => does not store in table Ex: Mongodb

sql /sequel are same  => STRUCTURED QUERY LANGUAGE interact with realtional database => CRUD operations 
 
Database => table => rows and columns => columns = schema / structure / desgin => row = shows data   

create database => CREATE DATABASE db_name ;
drop database => DROP DATABASE db_name ; 

USE db_name ; => all work under this database  

DATATYPES 
varchar >> char varchar takes only that much memory which is required
signed => both negative and positive , unsigned => only positive  

types of sql commands 
ddl => data definition language => create alter rename truncate and drop 
dql => data query language => select 
dml => data manipulation language => insert update delete 
dcl => data control language => grant revoke (permission to users)
tcl => transcation control language => start commit rollback 

DATABASE QUERY 
create database  => CREATE DATABASE IF NOT EXIST db_name ;
drop database => DROP DATABASE IF EXIST db_name ; 
show database / table => SHOW db_name / SHOW tables ; 
USE db_name ; => all work under this database 
 
TABLES QUERY 
CREATE TABLE => CREATE TABLE table_name ( column_name datatype constraint , column_name datatype constraint ) ;

SELECT * FROM table_name ; 

INSERT INTO tb_name (col_name , col_name) VALUES( c1v1 ,c2v2 ) (c1v3 , c2v2) ;

KEYS 
PRIMARY KEY => COLUMN OR SET OF COLUMN UNIQUE BUT CHOOSE ONLY ONE IDENTIFIY ROW  NOT NULL 
FOREIGN KEY => COLUMN OR SET OF COLUMN THAT REFERS TO PRIMARY KEY OF ANOTHER TABLE CAN BE DUPLICATE AND NULL => RULE TO WRITE => FOREIGN KEY (COLUMN_NAME_YOU_NEED_IN_NEW_TABLE) REFERENCES TABLE_NAME(COLUMN_NAME_PRIMARY_KEY_OF_THAT_TABLE) ; 

CONSTRAINTS => NOT NULL , UNIQUE , PRIMARY KEY , FOREIGN KEY ,DEFAULT , CHECK 

WHERE CLAUSE 
SELECT COL_NAME FROM TABLE_NAME WHERE CONDITION ; 

OPERATORS USED IN CONDITION 
ARITHMETIC OPERATOR 
COMPARISON OPERATOR 
LOGICAL OPERATOR 
BITWISE OPERATOR 

BETWEEN ( SELECT RANGE ) SELECT * FROM TABLE_NAME WHERE MARKS BETWEEN 80 AND 90 ; 
IN (MATCHES VALUES ) SELECT * FROM TABLE_NAME WHERE COLUMN_NAME IN ("DLEHI " , "MUMBAI) ; 
NOT (TO NEGATE CONDITION ) SELECT * FROM STUDENTS WHERE COLUMN_NAME NOT IN("DELHI" ) ; 

LIMIT => THIS IS USED TO SHOW ONLY THAT NUMBER OF DATA SHOW TOP MOST ONLY =>  SELECT * FROM TABLE_NAME LIMIT NUMBER ; 

ORDER BY => IN ASC OR DESC 

AGGREGRATE FUNCTIONS : 
PERFORM CALCULATIONS TAKE MULTIPLE VALUES AND RETURN SINGLE VALUE 
COUNT()
MAX() 
MIN()
SUM()
AVG()

SELECT MAX(MARKS) FROM TABLE_NAME ; 

GROUP BY => GROUP THE VALUES THAT IS THE ROW WHICH HAS THE SAME VALUE AND GIVE RESULT IN COMBINE IN ONE OR MORE COLUMN  => COMBINE KARTA H ROW KO => GROUP BY KE SAATH MAJORLY AGGREGATE FUNCTIONS HOTE H => JO SELECT KE BAAD HO VAAHI GROUP BY KE BAAD BHI SAATH M HONA CAHHIYE 

SELECT CITY , COUNT(NAME) FROM TABLE_NAME GROUP BY CITY ; 

UPDATE TABLE 

UPDATE TABLE_NAME SET VALUES WHERE CONDITONS ; 

SAFE MODE => DOES NOT ALLOW TABLE TO UPDATE IN SQL => SET_SAFE_UPDATES = 0 ; 

DELETE => DELETE FROM TABLE_NAME WHERE CONDITIONS ; 

ON DELETE CASCADE / ON UPDATE CASCADE => THEY ARE USE TO UPDATE AND DELETE THE FOREIGN KEYS WHEN THE VALUES CHANGE AT THAT TABLE IT SHOULD BE REFLECTED IN THIS TABLE ALSO THEREFORE CASCADE ARE USE ;  

ALTER => USED TO CHANGE THE SCHEMA => MEANS KE COLUMN KO MANIPULATE KARNA 
ALTER TABLE TABLE_NAME ADD COLUMN COLUMN_NAME DATATYPE CONSTRAINTS ;
ALTER TABLE TABLE_NAME DROP COLUMN COLUMN_NAME DATATYPE CONSTRAINTS ;
ALTER TABLE TABLE_NAME RENAME TO NEW_TABLE_NAME ; 
ALTER TABLE TABLE_NAME CHANGE COLUMN OLD_COLUMN_NAME NEW_COLUMN_NAME ; 
ALTER TABLE TABLE_NAME MODIFY OLD_COLUMN_NAME NEW_DATATYPE_NAME ;

TRUNCATE => THIS IS USED TO DELETE ALL THE DATA FROM THE TABLE => COLUMN WILL BE THERE BUT DATA WILL NOT BE THERE ;

TRUNCATE TABLE TABLE_NAME ; 

JOINS IN SQL => THEY ARE USED TO COMBINE 2 OR MORE TABLES BASED ON RELATED COLUMN BETWEEN THEM 

INNER JOIN => SELECT * FROM TABLE1_NAME INNER JOIN TABLE2_NAME ON CONDITIONS ; 

LEFT JOIN => SELECT * FROM TABLE1_NAME LEFT JOIN TABLE2_NAME ON CONDITIONS ; 

RIGHT JOIN => SELECT * FROM TABLE1_NAME RIGHT JOIN TABLE2_NAME ON CONDITIONS ; 

FULL JOIN => SELECT * FROM TABLE1_NAME LEFT JOIN TABLE2_NAME ON CONDITIONS UNION SELECT * FROM TABLE1_NAME RIGHT JOIN TABLE2_NAME ON CONDITIONS ;

LEFT EXCLUSIVE JOIN => ONLY NON COMMON VALUES ON TABLE1 => SELECT * FROM TABLE1_NAME LEFT JOIN TABLE2_NAME ON CONDITIONS WHERE TABLE2.ID IS NULL ;

RIGHT EXCLUSIVE JOIN => ONLY NON COMMON VALUES ON TABLE2 => SELECT * FROM TABLE1_NAME RIGHT JOIN TABLE2_NAME ON CONDITIONS WHERE TABLE1.ID IS NULL ;

UNION => COMBINE 2 TABLES AND GIVE COMMON VALUES => SELECT COLUMN FROM TABLE1 UNION SELECT COLUMN FROM TABLE2 ; 

SUBQUERY => QUERY INSIDE A QUERY => 3 OPTIONS ALIVABLE => SELECT FROM AND WHERE 
 

